# OpenAPI Specification for the Jobs Service
# Version: 3.0.3

openapi: 3.0.3
info:
  title: "Jobs Service API"
  description: |-
    This API manages the lifecycle of job postings on the Freelancer Platform. 
    It handles the creation, retrieval, updating, and deletion of jobs, 
    as well as public search and filtering capabilities.
  version: "1.0.0"
  contact:
    name: "Platform Engineering Team"
    email: "dev-team@freelanceudea.com"

servers:
  - url: "http://localhost:3002/api/v1"
    description: "Local Development Server"

tags:
  - name: "Jobs"
    description: "Endpoints for public job searching and viewing."
  - name: "Employer Job Management"
    description: "Endpoints for employers to manage their job postings. Requires authentication."
  - name: "Health"
    description: "Health check endpoint for monitoring service status."

# ===============================
# Paths
# ===============================
paths:
  /jobs:
    get:
      tags:
        - "Jobs"
      summary: "List and filter all active jobs"
      description: "Retrieves a paginated list of active job postings. Allows filtering by job type, experience level, and salary range."
      operationId: "listJobs"
      parameters:
        - name: "q"
          in: "query"
          description: "Search query for job titles or descriptions."
          required: false
          schema:
            type: "string"
        - name: "jobType"
          in: "query"
          description: "Filter by job type."
          required: false
          schema:
            $ref: "#/components/schemas/JobType"
        - name: "experienceLevel"
          in: "query"
          description: "Filter by experience level."
          required: false
          schema:
            $ref: "#/components/schemas/ExperienceLevel"
        - name: "minSalary"
          in: "query"
          description: "Filter for jobs with a salary greater than or equal to this value."
          required: false
          schema:
            type: "integer"
            format: "int32"
        - name: "page"
          in: "query"
          description: "Page number for pagination."
          required: false
          schema:
            type: "integer"
            default: 1
        - name: "limit"
          in: "query"
          description: "Number of results per page."
          required: false
          schema:
            type: "integer"
            default: 20
      responses:
        '200':
          description: "A paginated list of jobs."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Job"
    post:
      tags:
        - "Employer Job Management"
      summary: "Create a new job posting"
      description: "Allows an authenticated employer to post a new job. The employer's ID will be extracted from the authentication token."
      operationId: "createJob"
      security:
        - bearerAuth: []
      requestBody:
        description: "Job object that needs to be added to the store"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobInput"
      responses:
        '201':
          description: "Job created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        '400':
          description: "Invalid input provided."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /{jobId}:
    parameters:
      - name: "jobId"
        in: "path"
        description: "ID of the job to perform operations on."
        required: true
        schema:
          type: "string"
          format: "uuid"
    get:
      tags:
        - "Jobs"
      summary: "Get a single job by ID"
      description: "Retrieves the full details of a specific job posting."
      operationId: "getJobById"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        '404':
          description: "Job not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - "Employer Job Management"
      summary: "Update an existing job"
      description: "Allows an authenticated employer to update one of their own job postings."
      operationId: "updateJob"
      security:
        - bearerAuth: []
      requestBody:
        description: "Job object with updated information."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobInput"
      responses:
        '200':
          description: "Job updated successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        '400':
          description: "Invalid input provided."
        '401':
          description: "Unauthorized or user does not own this job."
        '404':
          description: "Job not found."
    delete:
      tags:
        - "Employer Job Management"
      summary: "Delete a job posting"
      description: "Allows an authenticated employer to delete one of their job postings."
      operationId: "deleteJob"
      security:
        - bearerAuth: []
      responses:
        '204':
          description: "Job deleted successfully."
        '401':
          description: "Unauthorized or user does not own this job."
        '404':
          description: "Job not found."

  /health:
    get:
      tags:
        - "Health"
      summary: "Health check"
      description: "Returns the health status of the service for monitoring purposes."
      operationId: "getHealth"
      responses:
        '200':
          description: "Service is healthy."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"

# ===============================
# Components
# ===============================
components:
  schemas:
    JobType:
      type: "string"
      enum:
        - "Full-time"
        - "Part-time"
        - "Contract"
        - "Internship"
    ExperienceLevel:
      type: "string"
      enum:
        - "Entry-Level"
        - "Mid-Level"
        - "Senior-Level"
        - "Expert"
    JobStatus:
      type: "string"
      enum:
        - "Open"
        - "Closed"
        - "Draft"
      default: "Open"
    Job:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "Unique identifier for the job."
          readOnly: true
        employerId:
          type: "string"
          format: "uuid"
          description: "The ID of the employer who posted the job."
          readOnly: true
        title:
          type: "string"
          example: "Senior Backend Developer"
        description:
          type: "string"
          example: "We are looking for a skilled backend developer to join our team..."
        responsibilities:
          type: "string"
          example: "- Design and implement APIs...\n- Write clean, maintainable code..."
        jobType:
          $ref: "#/components/schemas/JobType"
        experienceLevel:
          $ref: "#/components/schemas/ExperienceLevel"
        minSalary:
          type: "integer"
          format: "int32"
          example: 90000
        maxSalary:
          type: "integer"
          format: "int32"
          example: 120000
        requiredSkills:
          type: "array"
          items:
            type: "string"
          example: ["Java", "Spring Boot", "PostgreSQL"]
        status:
          $ref: "#/components/schemas/JobStatus"
        createdAt:
          type: "string"
          format: "date-time"
          description: "Timestamp of when the job was created."
          readOnly: true
        updatedAt:
          type: "string"
          format: "date-time"
          description: "Timestamp of the last update."
          readOnly: true
    JobInput:
      type: "object"
      required:
        - title
        - description
        - jobType
        - experienceLevel
      properties:
        title:
          type: "string"
          example: "Senior Backend Developer"
        description:
          type: "string"
          example: "We are looking for a skilled backend developer to join our team..."
        responsibilities:
          type: "string"
          example: "- Design and implement APIs...\n- Write clean, maintainable code..."
        jobType:
          $ref: "#/components/schemas/JobType"
        experienceLevel:
          $ref: "#/components/schemas/ExperienceLevel"
        minSalary:
          type: "integer"
          format: "int32"
          example: 90000
        maxSalary:
          type: "integer"
          format: "int32"
          example: 120000
        requiredSkills:
          type: "array"
          items:
            type: "string"
          example: ["Java", "Spring Boot", "PostgreSQL"]
        status:
          $ref: "#/components/schemas/JobStatus"
    Error:
      type: "object"
      properties:
        code:
          type: "string"
        message:
          type: "string"
    HealthResponse:
      type: "object"
      properties:
        status:
          type: "string"
          example: "ok"
          description: "Health status of the service"
        timestamp:
          type: "string"
          format: "date-time"
          example: "2023-12-01T10:30:00.000Z"
          description: "Timestamp when the health check was performed"
        service:
          type: "string"
          example: "jobs-service"
          description: "Name of the service"
  securitySchemes:
    bearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
      description: "JWT token for authentication. Example: 'Bearer {token}'"

